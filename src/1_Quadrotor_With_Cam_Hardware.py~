#!/usr/bin/env python

# Quadrotor Simulator
# Jonathan Lwowski and Yonggun Lee
# Email: jonathan.lwowski@gmail.com yonggun.lee@utsa.edu
# Unmanned Systems Lab
# The University of Texas at San Antonio

import cv2
import cv
import sys
from std_msgs.msg import String
from sensor_msgs.msg import Image
from cv_bridge import CvBridge, CvBridgeError
import rospy
from std_msgs.msg import Empty
from geometry_msgs.msg import Twist 
from nav_msgs.msg import Odometry
from sensor_msgs.msg import Imu
from sensor_msgs.msg import Range
from geometry_msgs.msg import PointStamped
from geometry_msgs.msg import Vector3Stamped
import math
import numpy as np




quad1pos = 0
quad1imu = 0
quad1sonar = 0
quad1pressure = 0
quad1magnetic = 0
quad1altimeter = 0
quad1imu_orientation_x=0
quad1imu_orientation_y=0
quad1imu_orientation_z=0
quad1imu_orientation_w=0
bearing=0
bearing2=0
phi=0
theta=0
psi=0


class image_converter:

  def __init__(self):
    self.image_pub = rospy.Publisher("/image",Image)

    cv2.namedWindow("Image window", 1)
    self.bridge = CvBridge()
    self.image_sub = rospy.Subscriber("/ardrone/image_raw",Image,self.callback)

  def callback(self,data):
    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
    except CvBridgeError, e:
      print e

    (rows,cols,channels) = cv_image.shape
    if cols > 60 and rows > 60 :
      cv2.circle(cv_image, (50,50), 10, 255)
    ### Start of Image Processing ######

    ### End of Image Processing ######
    cv2.imshow('Image window', cv_image)
    cv2.waitKey(3)

    try:
      cv_image = self.bridge.imgmsg_to_cv2(data, "bgr8")
      
    except CvBridgeError, e:
      print e

def callback5(data):
    global quad1imu
    global quad1imu_orientation_x
    global quad1imu_orientation_y
    global quad1imu_orientation_z
    global quad1imu_orientation_w
    quad1imu = data
    quad1imu_orientation_x=data.orientation.x
    quad1imu_orientation_y=data.orientation.y
    quad1imu_orientation_z=data.orientation.z
    quad1imu_orientation_w=data.orientation.w
    
 
def callback12(data):
    global quad1sonar
    quad1sonar = data


def callback16(data):
    global quad1pressure
    quad1pressure = data


def callback20(data):
    global quad1magnetic
    quad1magnetic = data

    
   

def imuquad1():
    rospy.Subscriber("/ardrone/imu", Imu, callback5)  





def sonarquad1():
    rospy.Subscriber("/sonar_height", Range, callback12) 



def pressurequad1():
    rospy.Subscriber("/pressure_height", PointStamped, callback16)



def magneticquad1():
    rospy.Subscriber("/ardrone/mag", Vector3Stamped, callback20)

def QuaterniontoEuler():
    e1=quad1imu_orientation_x
    e2=quad1imu_orientation_y
    e0=quad1imu_orientation_z
    e3=quad1imu_orientation_w
    
    #Pitch
    theta= math.atan2(2*(e0*e1+e2*e3),(e0**2+e3**2-e1**2-e2**2))
    #Roll
    phi= math.asin(2*(e0*e2-e1*e3))
    #Heading
    psi = math.atan2(2*(e0*e3+e1*e2),(e0**2+e1**2-e2**2-e3**2))

    global phi
    phi=phi*180/math.pi
    global theta
    theta=theta*180/math.pi
    global psi
    psi=psi*180/math.pi




def takeoff():
    pub1 = rospy.Publisher('/ardrone/takeoff', Empty)
    rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    x = 0
    for x in range(0, 700000):
        pub1.publish(Empty())


def hover(time):

    pub1 = rospy.Publisher('/cmd_vel', Twist)
    rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    command = Twist()
    command.linear.x = 0.00
    command.linear.y = 0.00
    command.linear.z = 0.00
    command.angular.x = 0.00
    command.angular.y = 0.00
    command.angular.z = 0.00
    x = 0
    for x in range(0, time):
	
        #str = "hello world %s"%rospy.get_time()
        #rospy.loginfo(str)
        pub1.publish(command)
    QuaterniontoEuler()
       
       

        #r.sleep()


def land():
    pub1 = rospy.Publisher('/ardrone/land', Empty)
    #rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    command = Empty()
    c = 0
    for c in range(0, 400000):
        pub1.publish(command)
     
  
def sepmovetime(time, lx1, ly1, lz1, ax1, ay1, az1):   
    pub1 = rospy.Publisher('/cmd_vel', Twist)


   
    rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    command1 = Twist()
    command1.linear.x = lx1
    command1.linear.y = ly1
    command1.linear.z = lz1
    command1.angular.x = ax1
    command1.angular.y = ay1
    command1.angular.z = az1
    hover = Twist()
    hover.linear.x = 0.0
    hover.linear.y = 0.0
    hover.linear.z = 0.0
    hover.angular.x = 0.0
    hover.angular.y = 0.0
    hover.angular.z = 0.0
    q=0
    for q in range(0, time):
	pub1.publish(command1)
	QuaterniontoEuler()
  
    pub1.publish(hover)

def sepmove(lx1, ly1, lz1, ax1, ay1, az1):   
    pub1 = rospy.Publisher('/cmd_vel', Twist)
    rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    command1 = Twist()
    command1.linear.x = lx1
    command1.linear.y = ly1
    command1.linear.z = lz1
    command1.angular.x = ax1
    command1.angular.y = ay1
    command1.angular.z = az1
    pub1.publish(command1)

  
    

def moveangle(roll, pitch, yaw):   
    pub1 = rospy.Publisher('/cmd_vel', Twist)   
    rospy.init_node('takeoff', anonymous=True)
    r = rospy.Rate(10) # 10hz
    lx1=(pitch-.07)/(.5)
    ly1=(roll+.048)/(.44)
    command1 = Twist()
    command1.linear.x = lx1
    command1.linear.y = ly1
    command1.linear.z = 0
    command1.angular.x = 0
    command1.angular.y = 0
    command1.angular.z = yaw
    QuaterniontoEuler()
    if(theta<pitch):
    	command1.linear.x=command1.linear.x+.000001
    elif(theta>pitch):
	command1.linear.x=command1.linear.x-.000001
    else:
	command1.linear.x=command1.linear.x
    if(phi<roll):
    	command1.linear.y=command1.linear.y+.000001
    elif(phi>roll):
	command1.linear.y=command1.linear.y-.000001
    else:
	command1.linear.y=command1.linear.y
    #if(psi<(yaw+3) and psi > (yaw-3) ):
    #	command1.angular.z= 0.0
    #elif( psi<(yaw-3)):
	#command1.angular.z= -0.7
    #else:
	#command1.angular.z= 0.7
    pub1.publish(command1)
	

    
def centerbearingangle(time):   
   
    for q in range(0, time):
    	if(bearing>-10000000 and bearing<1000000):
    		roll=((.005)*bearing)
    		if(roll>1.0):
    			roll=1.0
		elif(roll<-1.0):
			roll=-1.0
		pitch=((.005)*bearing2)
    		if(pitch>1.0):
    			pitch=1.0
		elif(pitch<-1.0):
			pitch=-1.0
		sepmove(-pitch,-roll,0,0,0,0)
		print 'bearing = ', bearing
	else:
		sepmove(0,0,0,0,0,0)
  
def bearingangleavoidance():   
    V=.2;
    rho_tilde_min = 1
    B0 = 0.05
    epsilon = 0.01
    eta_d1 = 10*(3.14159/180)

    	
    for q in range(0, 100000):
    	if (sign(bearing*(3.14159/180))>0):
    		eta_d2=abs(eta_d1)
	else:
    		eta_d2=-abs(eta_d1)
    	u_psi = (abs(V*math.sin(bearing*(3.14159/180)))/rho_tilde_min+B0)*satSgn((bearing*(3.14159/180)-eta_d2)/epsilon);
    	sepmove(0.05,0,0,0,0,-u_psi)
    	print "Bearing = ", bearing, "\n"
    	f.write (str(bearing) + ", ")
    	f.write (str(phi) + ", ")
	f.write (str(theta) + " ,")
	f.write (str(psi) + ", ")
	f.write (str(u_psi) + " ,\n")
	
def satSgn(u): 
    if (u>-1 and u <1):
    	output = u;
    else:
    	output = sign(u) 
    return output
    
def sign(u): 
    if (u>0):
    	output = 1
    elif (u<0):
    	output = -1
    elif (u==0):
    	output=0 
    return output  

       

        
if __name__ == '__main__':
    image_converter()
    #f = open('workfile.csv', 'w')
    try:
        #image_converter()
    	#QuaterniontoEuler()
	#imuquad1()
	#sonarquad1()
	#pressurequad1()
	#magneticquad1()
	#takeoff()
	hover(1000000)
	#centerbearingangle(500000)
	#hover(100)
	#land()
	#f.close()
	#QuaterniontoEuler()
	
	
	
    except rospy.ROSInterruptException: pass
